# This is a basic workflow to help you get started with Actions

name: test_data_eng

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths-ignore: 
      - '.github/**'
      - 'app/**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Getting the ECR repos
        shell: bash
        run: |
          array=()
          for file in images/test_2/dockerfile images/db_acess/dockerfile images/test_2/requirements.txt ;do

              if [[ $file =~ ^images/* ]];then
                  echo $file
                  echo "IMAGE_DIR=$(cut -d '/' -f 1 <<< $file)" >> $GITHUB_ENV
                  array+=($(cut -d '/' -f 2 <<< $file))
              fi
          done

          echo ""
          echo "IMAGE_DIR=$IMAGE_DIR"


          echo ""
          echo "#########################"
          echo "ECR_REPOS WITHOUT CLEANING"
          echo ${array[@]}

          echo ""
          echo "##################################"
          echo "SORTING AND ELIMINATING DUPLICATES"
          sorted_array=()
          sorted_array=( `for i in ${array[@]};do echo $i; done | sort -u` )

          echo "ECR_REPOS=${sorted_array[@]}" >> $GITHUB_ENV
              
      # - name: Testing if we get back the array
      #   shell: bash
      #   run: |
      #     echo "FILES INSIDE THE ECR_REPOS"
      #     array=()
      #     counter=1
      #     for file in $ECR_REPOS;do
      #       array+=( "${file}:${counter}" )
      #       let "counter+=1"
      #     done

      #     for file in $ECR_REPOS;do
      #       echo "$file"
      #     done

      #     echo "ECR_REPOS_AND_TAGS=${array[@]}" >> $GITHUB_ENV

      - name: Creating a comma-serapated string from array
        shell: bash
        run: |
          delim=""
          joined="["
          for file in $ECR_REPOS;do
            joined="$joined$delim$file"
            delim=","
          done
          joined="$joined]"
          echo "New variable to pass on next job: $joined"
          echo "MATRIX_REPOS=$joined" >> $GITHUB_ENV

    outputs:
      REPOS: ${{ env.ECR_REPOS }}
      MATRIX_REPOS: ${{ env.MATRIX_REPOS }}

  
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ECR_REPOS_AND_TAGS: ${{ needs.build.outputs.MATRIX_REPOS }}
    steps:
      - name: "Checking how data we get back is structured"
        shell: bash
        run: |
          echo "REPO:"
          echo "${{ matrix.ECR_REPOS_AND_TAGS }}"
      