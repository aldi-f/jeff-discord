# This is a basic workflow to help you get started with Actions

name: test_data_eng

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths-ignore: 
      - '.github/**'
      - 'app/**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Getting the ECR repos
        shell: bash
        run: |
          array=()
          for file in images/test_2/dockerfile images/db_acess/dockerfile images/test_2/requirements.txt ;do

              if [[ $file =~ ^images/* ]];then
                  echo $file
                  echo "IMAGE_DIR=$(cut -d '/' -f 1 <<< $file)" >> $GITHUB_ENV
                  array+=($(cut -d '/' -f 2 <<< $file))
              fi
          done

          echo ""
          echo "IMAGE_DIR=$IMAGE_DIR"


          echo ""
          echo "#########################"
          echo "ECR_REPOS WITHOUT CLEANING"
          echo ${array[@]}

          echo ""
          echo "##################################"
          echo "SORTING AND ELIMINATING DUPLICATES"
          sorted_array=()
          sorted_array=( `for i in ${array[@]};do echo $i; done | sort -u` )

          echo "ECR_REPOS=${sorted_array[@]}" >> $GITHUB_ENV
              
      - name: Testing if we get back the array
        shell: bash
        run: |
          echo "FILES INSIDE THE ECR_REPOS"
          array=()
          counter=1
          for file in $ECR_REPOS;do
            array+=( "${file}:${counter}" )
            let "counter+=1"
          done

          for file in $ECR_REPOS;do
            echo "$file"
          done

          echo "ECR_REPOS_AND_TAGS=${array[@]}" >> $GITHUB_ENV

      - name: Validating Data
        shell: bash
        run: |
          tag="v1"
          echo "Tag length is ${#tag}"
          if [ ${#tag} -lt 1 ];then
              exit "Exiting gracefully cuz of issues"
          fi
          

      - name: Creating a comma-serapated string from array
        id: format
        shell: bash
        run: |
          json_file="{\"include\":["
          for x in $ECR_REPOS_AND_TAGS;do
              echo  "{\"repo\":\"$x\"},"   
              json_file+="{\"repo\":\"$x\"},"

          done
          json_file="${json_file:0:${#json_file}-1}]}"
          echo "::set-output name=MATRIX_REPOS::$json_file"
                    

    outputs:
      REPOS: ${{ env.ECR_REPOS }}
      MATRIX_REPOS: ${{ steps.format.outputs.MATRIX_REPOS }}

  
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.build.outputs.MATRIX_REPOS) }}
    steps:
      - name: "Checking how data we get back is structured"
        shell: bash
        run: |
          echo "REPO:"
          echo "${{ matrix.repo }}"
      